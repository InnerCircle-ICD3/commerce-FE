/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticatedProductsImport } from './routes/_authenticated/products'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as AuthenticatedOrdersIndexImport } from './routes/_authenticated/orders/index'
import { Route as AuthenticatedOrdersOrderNumberImport } from './routes/_authenticated/orders/$orderNumber'

// Create/Update Routes

const AuthenticatedRouteRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthenticatedProductsRoute = AuthenticatedProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const AuthenticatedOrdersIndexRoute = AuthenticatedOrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthenticatedOrdersOrderNumberRoute =
  AuthenticatedOrdersOrderNumberImport.update({
    id: '/orders/$orderNumber',
    path: '/orders/$orderNumber',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/_authenticated/products': {
      id: '/_authenticated/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof AuthenticatedProductsImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/orders/$orderNumber': {
      id: '/_authenticated/orders/$orderNumber'
      path: '/orders/$orderNumber'
      fullPath: '/orders/$orderNumber'
      preLoaderRoute: typeof AuthenticatedOrdersOrderNumberImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/orders/': {
      id: '/_authenticated/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof AuthenticatedOrdersIndexImport
      parentRoute: typeof AuthenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface AuthenticatedRouteRouteChildren {
  AuthenticatedProductsRoute: typeof AuthenticatedProductsRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedOrdersOrderNumberRoute: typeof AuthenticatedOrdersOrderNumberRoute
  AuthenticatedOrdersIndexRoute: typeof AuthenticatedOrdersIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedProductsRoute: AuthenticatedProductsRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedOrdersOrderNumberRoute: AuthenticatedOrdersOrderNumberRoute,
  AuthenticatedOrdersIndexRoute: AuthenticatedOrdersIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof AuthenticatedIndexRoute
  '': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/products': typeof AuthenticatedProductsRoute
  '/orders/$orderNumber': typeof AuthenticatedOrdersOrderNumberRoute
  '/orders': typeof AuthenticatedOrdersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof AuthenticatedIndexRoute
  '/login': typeof authLoginRoute
  '/products': typeof AuthenticatedProductsRoute
  '/orders/$orderNumber': typeof AuthenticatedOrdersOrderNumberRoute
  '/orders': typeof AuthenticatedOrdersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/_authenticated/products': typeof AuthenticatedProductsRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/orders/$orderNumber': typeof AuthenticatedOrdersOrderNumberRoute
  '/_authenticated/orders/': typeof AuthenticatedOrdersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/products'
    | '/orders/$orderNumber'
    | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/products' | '/orders/$orderNumber' | '/orders'
  id:
    | '__root__'
    | '/(auth)'
    | '/_authenticated'
    | '/(auth)/login'
    | '/_authenticated/products'
    | '/_authenticated/'
    | '/_authenticated/orders/$orderNumber'
    | '/_authenticated/orders/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/_authenticated"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated/route.tsx",
      "children": [
        "/_authenticated/products",
        "/_authenticated/",
        "/_authenticated/orders/$orderNumber",
        "/_authenticated/orders/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/_authenticated/products": {
      "filePath": "_authenticated/products.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/orders/$orderNumber": {
      "filePath": "_authenticated/orders/$orderNumber.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/orders/": {
      "filePath": "_authenticated/orders/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
