const { WebSocketServer } = require("ws");
const { randomUUID } = require("node:crypto");

class GroupChatServer {
    constructor() {
        this.wss = new WebSocketServer({ port: 8080 });
        this.clients = new Map(); // Ïó∞Í≤∞Îêú Î™®Îì† ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏
        this.messages = []; // Ï†ÑÏ≤¥ Î©îÏãúÏßÄ Í∏∞Î°ù
        this.MAX_MESSAGES = 500; // ÏµúÎåÄ Î©îÏãúÏßÄ Í∞úÏàò
        this.setupServer();

        console.log("üí¨ Í∑∏Î£π Ï±ÑÌåÖ ÏÑúÎ≤ÑÍ∞Ä ws://localhost:8080ÏóêÏÑú Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§");
    }

    setupServer() {
        this.wss.on("connection", ws => {
            console.log("ÏÉàÎ°úÏö¥ ÏÇ¨Ïö©Ïûê Ïó∞Í≤∞");

            ws.on("message", data => {
                try {
                    const message = JSON.parse(data.toString());
                    const { type, data: payload } = message;

                    // Í∞ÑÎã®Ìïú Í≤ÄÏ¶ù Ï∂îÍ∞Ä
                    if (type === "join" && typeof payload?.userName === "string" && payload.userName.length <= 50) {
                        this.handleMessage(ws, message);
                    } else if (
                        type === "sendMessage" &&
                        typeof payload?.message === "string" &&
                        payload.message.trim().length > 0 &&
                        payload.message.length <= 500
                    ) {
                        this.handleMessage(ws, message);
                    } else {
                        ws.send(JSON.stringify({ error: "INVALID_PAYLOAD" }));
                    }
                } catch (error) {
                    console.error("Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:", error);
                }
            });

            ws.on("close", () => {
                this.handleDisconnection(ws);
            });
        });
    }

    handleMessage(ws, message) {
        const { type, data } = message;

        switch (type) {
            case "join":
                this.handleJoin(ws, data);
                break;
            case "sendMessage":
                this.handleSendMessage(ws, data);
                break;
            default:
                console.log("Ïïå Ïàò ÏóÜÎäî Î©îÏãúÏßÄ ÌÉÄÏûÖ:", type);
        }
    }

    handleJoin(ws, data) {
        const { userName } = data;
        const userId = randomUUID();

        const userInfo = {
            id: userId,
            name: userName,
            ws: ws,
            connectedAt: new Date().toISOString(),
        };

        this.clients.set(userId, userInfo);
        ws.userInfo = userInfo; // Ïó≠Ï∞∏Ï°∞ Ï†ÄÏû•
        console.log(`${userName} ÏûÖÏû• (Ï¥ù ${this.clients.size}Î™Ö)`);

        // ÏûÖÏû• Î©îÏãúÏßÄÎ•º Î™®Îì† ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
        const joinMessage = {
            id: randomUUID(),
            sender: "ÏãúÏä§ÌÖú",
            message: `${userName}ÎãòÏù¥ ÏûÖÏû•ÌñàÏäµÎãàÎã§`,
            timestamp: new Date().toISOString(),
            type: "system",
        };

        this.broadcastMessage(joinMessage);
        this.addMessage(joinMessage);
    }

    handleSendMessage(ws, data) {
        const { message: messageText } = data;

        // Î∞úÏã†Ïûê Ï∞æÍ∏∞
        const senderName = ws.userInfo?.name ?? "ÏùµÎ™Ö";

        // Î©îÏãúÏßÄ ÏÉùÏÑ±
        const message = {
            id: randomUUID(),
            sender: senderName,
            message: messageText,
            timestamp: new Date().toISOString(),
            type: "user",
        };

        console.log(`${senderName}: ${messageText}`);

        // Î™®Îì† ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÍ≤å Î©îÏãúÏßÄ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
        this.broadcastMessage(message);
        this.addMessage(message);
    }

    handleDisconnection(ws) {
        // Ïó∞Í≤∞ Ìï¥Ï†úÎêú ÏÇ¨Ïö©Ïûê Ï∞æÍ∏∞ Î∞è Ï†úÍ±∞
        for (const [id, info] of this.clients.entries()) {
            if (info.ws === ws) {
                console.log(`${info.name} Ìá¥Ïû• (Ï¥ù ${this.clients.size - 1}Î™Ö)`);

                // Ìá¥Ïû• Î©îÏãúÏßÄÎ•º Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§ÏóêÍ≤å Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
                const leaveMessage = {
                    id: randomUUID(),
                    sender: "ÏãúÏä§ÌÖú",
                    message: `${info.name}ÎãòÏù¥ Ìá¥Ïû•ÌñàÏäµÎãàÎã§`,
                    timestamp: new Date().toISOString(),
                    type: "system",
                };

                this.clients.delete(id);
                this.broadcastMessage(leaveMessage);
                this.addMessage(leaveMessage);
                break;
            }
        }
    }

    broadcastMessage(message) {
        const messageData = {
            type: "message",
            data: message,
        };

        for (const [id, info] of this.clients.entries()) {
            if (info.ws.readyState === 1) {
                // WebSocket.OPEN
                info.ws.send(JSON.stringify(messageData));
            }
        }
    }

    addMessage(message) {
        this.messages.push(message);
        if (this.messages.length > this.MAX_MESSAGES) {
            this.messages.shift(); // Í∞ÄÏû• Ïò§ÎûòÎêú Î©îÏãúÏßÄ ÏÇ≠Ï†ú
        }
    }
}

// ÏÑúÎ≤Ñ ÏãúÏûë
const chatServer = new GroupChatServer();

// ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å Ï≤òÎ¶¨
const gracefulShutdown = () => {
    console.log("\nÏ±ÑÌåÖ ÏÑúÎ≤ÑÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§...");
    chatServer.wss.close(() => process.exit(0));
};
process.on("SIGINT", gracefulShutdown);
process.on("SIGTERM", gracefulShutdown);
