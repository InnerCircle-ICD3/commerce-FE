[도메인]
커머스

[프로젝트 주제]
온라인 쇼핑몰 서비스 개발(서비스)

[프로젝트 달성 목표]
고객이 제품을 검색하고, 주문하며, 피드백을 남길 수 있는 기능을 구현합니다.
백오피스를 통해 작성된 데이터를 효율적으로 활용하며, 시스템의 일관성과 유지보수성을 보장할 수 있도록 설계하고 지속적으로 개선합니다.

[필요 스택 및 역량]
BE	동적 스키마 정의, 검색 최적화, 실시간 통신(채팅)						
FE	SSR, 컴포넌트 기반 설계, 반응형 디자인, 실시간 통신(채팅)						

[기능적 요구사항]
1.	사용자 인증:	사용자가 직접 계정 등록, 프로필 수정, 로그인, 로그아웃을 할 수 있어야 한다.						
2.	상품 조회/주문:	상품을 조회하고 주문할 수 있다. 상품 검색에는 두 개 이상의 필터를 사용할 수 있어야 한다. 주문 처리 내역과 배송 상태를 확인할 수 있다.						
3.	리뷰 및 평점:	사용자는 상품에 대해 리뷰를 남기고 평점을 부여할 수 있어야 한다.						
4.	채팅 상담:	사용자는 웹 사이트 어디서든 채팅 상담 기능에 접근할 수 있다. 제품 상세 페이지에서는 해당 제품이 자동으로 컨텍스트로서 제공된다(레퍼런스: 네이버 톡톡).						
5.	반응형 디자인:	데스크톱부터 모바일까지 다양한 플랫폼을 지원하는 반응형 디자인을 적용한다. 디자인 예시						
6.	백오피스:	상품 목록, 상품 등록/수정/삭제, 고객 목록, 고객 등록/수정/삭제, 결제 내역을 볼 수 있는 간단한 백오피스 기능을 작성한다. 또한 사용자로부터 받은 채팅 상담 기록이 사용자별로 저장되어 있어야 한다. 데스크톱 환경만 고려한다.						

[프론트엔드]
도전 과제1 (필수):		검색을 고려하여 SSR 기능을 구현한다. 웹 페이지의 메타데이터도 적절하게 구성하여야 한다.
도전 과제2 (필수):		모든 입력 폼은 폼 입력 검사를 거친 후 전송된다. 오류 메시지는 사용자가 충분히 인식할 수 있는 형태로 화면에 제공한다.
도전 과제3 (필수):		채팅 상담 기능을 구현한다. 채팅창을 닫지 않고 페이지를 이동하면 채팅 세션이 유지되어야 한다. (적어도 사용자에게는 그렇게 보여야 한다)
도전 과제4 (권장):		결제 기능을 구현한다. 결제 서비스는 [핀테크] 프로젝트에서 제공하는 API를 사용한다. 주문을 취소하고 환불 받을 수 있다.

[백엔드]
도전 과제1 (필수):		데이터베이스 설계 및 최적화: 대량의 상품 데이터, 사용자 정보, 주문 및 리뷰 데이터를 효율적으로 관리할 수 있는 데이터베이스 구조를 설계합니다. 데이터의 무결성과 성능을 유지하면서도, 효율적인 쿼리 성능을 제공할 수 있도록 인덱스 설계, 파티셔닝, 캐싱 전략을 포함한 최적화 기법을 적용해야 합니다.
도전 과제2 (필수):		고급 필터 및 검색 기능: 대량의 데이터를 효율적으로 검색하고 필터링할 수 있는 고급 검색 기능을 구현합니다. 관리자 대시보드에서 필요한 데이터를 신속하게 찾아낼 수 있도록 복합 조건 검색, 정렬 기능 등을 지원합니다.
도전 과제3 (필수):		채팅 상담 기능을 구현합니다. 익명 사용자/가입 사용자에 대한 적절한 채팅 세션 처리와 가입 사용자의 여러 디바이스/탭에서 동시 접속 시 채팅 세션에 대한 처리를 적절히 수행합니다.
도전 과제4 (권장):		[핀테크] 프로젝트에서 제공하는 API를 이용하여 주문을 취소하고 환불 받을 수 있다.






[FE 기술 스택에 대해 팀원들이랑 얘기해본 것]
# 프레임워크
- Next.js 15

# 언어
- TypeScript

# 도구 후보
## 개발 생산성
- [biome.js](https://biomejs.dev/) (Formatting + Lint) - 성능의 이슈가 없으며, 디펜던시를 줄일 수 있음

## 기획 + 디자인
- creatie
- figma

## CSS
- tailwindCSS
- https://ui.shadcn.com/

## 상태 관리 라이브러리
- [Zustand](https://zustand-demo.pmnd.rs/)
- Tanstack Query

## 테스팅 라이브러리
- React Testing Library
- Vitest
- Playwright

## 번들링
- Turbopack - Next.js 기본 번들링 툴. 러스트 기반으로 파일들 병렬처리해서 빠름
- monorepo 고려중



[FE 컨벤션에 대해 팀원들과 얘기해본 것]
## 브랜치 컨벤션

---

- main (프로덕션 배포용)
- dev (개발 배포용)
    
    ![image.png](attachment:5cf57072-5c4a-4f5d-97bd-d2f0df704a26:image.png)
    

기능 브랜치 이름

ex) feature/login

## **PR 컨벤션**

---

PR 내용에 들어가야 하는 요소 : 작업 내용 요약, 변경사항, 테스트 방법

## 커밋 컨벤션

---

- feat : 새로운 기능 추가
- fix : 버그 수정
- docs : 문서 수정
- style : 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
- refactor : 코드 리펙토링
- test : 테스트 코드, 리펙토링 테스트 코드 추가
- chore : 빌드 업무 수정, 패키지 매니저 수정
- https://www.conventionalcommits.org/ko/v1.0.0/

ex)

```
feat: 회원 가입 기능 구현

SMS, 이메일 중복확인 API 개발
```

## 이름 컨벤션

---

- 기본: Camel Case (DTO는 백엔드와 논의)
- 컴포넌트: Pascal Case

## **코드 컨벤션**

---

에어비앤비 스타일 가이드 (참고용) : https://github.com/tipjs/javascript-style-guide

## 구조

---

```bash

├── app/                   # Next.js App Router 전용
│   ├── (dashboard)/       # 그룹화 라우트 (URL에는 안 나타남)
│   │   ├── page.tsx
│   │   └── layout.tsx
│   ├── (marketing)/
│   │   ├── page.tsx
│   │   └── layout.tsx
│   ├── api/               
│   │   └── hello/route.ts
│   ├── layout.tsx        
│   └── page.tsx          
│
├── src/
│   ├── features/          # 도메인(기능) 단위로 묶기
│   │   ├── auth/           # ex) 인증 관련 기능
│   │   │   ├── components/
│   │   │   │   └── LoginForm.tsx
│   │   │   ├── hooks/
│   │   │   │   └── useLogin.ts
│   │   │   ├── services/    # API 호출
│   │   │   │   └── authApi.ts
│   │   │   ├── stores/      # 상태관리
│   │   │   │   └── authStore.ts
│   │   │   ├── types/
│   │   │   │   └── auth.d.ts
│   │   │   └── index.ts
│   │   ├── profile/        # 프로필 관련 기능
│   │   │   ├── components/
│   │   │   │   └── ProfileCard.tsx
│   │   │   ├── hooks/
│   │   │   │   └── useProfile.ts
│   │   │   ├── services/
│   │   │   │   └── profileApi.ts
│   │   │   ├── stores/
│   │   │   │   └── profileStore.ts
│   │   │   ├── types/
│   │   │   │   └── profile.d.ts
│   │   │   └── index.ts
│   │   └── ...
│   │
│   ├── shared/            # 공용 컴포넌트, 유틸리티, 상수
│   │   ├── components/
│   │   │   ├── Button.tsx
│   │   │   └── Header.tsx
│   │   ├── hooks/
│   │   │   └── useDebounce.ts
│   │   ├── lib/
│   │   │   └── axios.ts
│   │   ├── utils/
│   │   │   └── formatDate.ts
│   │   ├── constants/
│   │   │   └── site.ts
│   │   └── types/
│   │       └── index.d.ts
│   │
│   └── stores/            # 글로벌 상태 (ex. 다크모드 등)
│       └── themeStore.ts
│
├── public/
│
├── styles/
│   └── globals.css
│
├── .env
├── next.config.mjs
├── tsconfig.json
└── package.json
```

참고용

https://github.com/vercel/commerce

https://vercel.com/templates

## lint/formatter 컨벤션

---

```jsx
// biome.json

...
"formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 4,
    "lineEnding": "lf",
    "lineWidth": 100,
    "quoteStyle": "double",
    "trailingComma": "all",
    "semiColon": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "style": {
        "noMixedSpacesAndTabs": "error",
        "noDuplicateCase": "error",
        "useSingleVarDeclarator": "error",
        "useBlockStatements": "error"
      },
      "complexity": {
        "noDuplicateImports": "error",
        "noShadowRestrictedNames": "error"
      },
      "correctness": {
        "noUnusedVariables": "warn",
        "noEmptyInterface": "warn",
        "noConstantCondition": "warn"
      },
      "suspicious": {
        "noCaseDeclarations": "warn",
        "noSelfAssign": "error",
        "noUselessCatch": "warn"
      }
    }
```

## 추가 논의 필요

---

1. 타입 스타일: `interface` vs `type` 
2. 에러 핸들링: API 에러 처리 공통 모듈 ? `error.tsx` , `error boundary` 등
3. API 요청 모듈 뭐쓸지: `fetch` , `axios` , `ky` 
4. Tanstack Query의 query key 명명
5. 백오피스는 디자인 X, shadcn으로
6. theme